# Include .env.cmake if present
include(./.env.cmake OPTIONAL RESULT_VARIABLE LOCAL_ENV)
message(STATUS "Local .env.cmake: ${LOCAL_ENV}")

set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

# Minimum required CMake version
cmake_minimum_required(VERSION 3.29.2)

# Project name and version
set(NAME GlorpEngine)
project(${NAME} VERSION 0.0.0)



# Check CMake generator
message(STATUS "using ${CMAKE_GENERATOR}")


# Handle specific configurations for MinGW on Windows
if (CMAKE_GENERATOR STREQUAL "MinGW Makefiles")
    if (NOT MINGW_PATH) 
        message(FATAL_ERROR "MINGW_PATH not set in .env.cmake")
    endif()
    set(USE_MINGW "True")
    set(CMAKE_C_COMPILER ${MINGW_PATH}/bin/gcc.exe)
    set(CMAKE_CXX_COMPILER ${MINGW_PATH}/bin/g++.exe)
endif()

# Set VULKAN_SDK_PATH in .env.cmake to target specific Vulkan version
if (DEFINED VULKAN_SDK_PATH)
    set(Vulkan_INCLUDE_DIRS "${VULKAN_SDK_PATH}/include")
    set(Vulkan_LIBRARIES "${VULKAN_SDK_PATH}/lib")
    set(Vulkan_FOUND "True")
else()
    find_package(Vulkan REQUIRED)
endif()

if (NOT Vulkan_FOUND)
    message(FATAL_ERROR "Could not find Vulkan library!")
else()
    message(STATUS "Using Vulkan SDK at: ${Vulkan_LIBRARIES}")
endif()

# Set GLFW_PATH in .env.cmake to target specific GLFW version
if (DEFINED GLFW_PATH)
    message(STATUS "Using GLFW path specified in .env")
    set(GLFW_INCLUDE_DIRS "${GLFW_PATH}/include")
    set(GLFW_LIBRARIES "${GLFW_PATH}/lib-macos")  # Adjust for macOS
else()
    find_package(glfw3 3.4 REQUIRED)
    set(GLFW_INCLUDE_DIRS ${glfw_INCLUDE_DIRS})
    set(GLFW_LIBRARIES glfw)
endif()

# Ensure GLFW is found
if (NOT GLFW_LIBRARIES)
    message(FATAL_ERROR "Could not find GLFW library!")
else()
    message(STATUS "Using GLFW library: ${GLFW_LIBRARIES}")
endif()

# Include directories
include_directories(
    ${PROJECT_SOURCE_DIR}/src
    ${Vulkan_INCLUDE_DIRS}
    ${GLFW_INCLUDE_DIRS}
)

# If TINYOBJ_PATH not specified in .env.cmake, use default path
if (NOT TINYOBJ_PATH)
    message(STATUS "TINYOBJ_PATH not specified, using external/tinyobjloader")
    set(TINYOBJ_PATH external/tinyobjloader)
endif()

# Find all source files
file(GLOB_RECURSE SOURCES ${PROJECT_SOURCE_DIR}/src/*.cpp)

# Create executable
add_executable(${PROJECT_NAME} ${SOURCES})

# Set C++ standard
target_compile_features(${PROJECT_NAME} PUBLIC cxx_std_17)

# Set working directory for VS debugger
set_property(TARGET ${PROJECT_NAME} PROPERTY VS_DEBUGGER_WORKING_DIRECTORY "${CMAKE_SOURCE_DIR}/build")

# Link libraries based on platform
if (WIN32)
    message(STATUS "Building for Windows")

    if (USE_MINGW)
        target_include_directories(${PROJECT_NAME} PUBLIC
            ${MINGW_PATH}/include
        )
        target_link_directories(${PROJECT_NAME} PUBLIC
            ${MINGW_PATH}/lib
        )
    endif()

    target_link_libraries(${PROJECT_NAME} glfw3 Vulkan::Vulkan)
elseif (APPLE)
    message(STATUS "Building for macOS")

    target_link_libraries(${PROJECT_NAME} glfw Vulkan::Vulkan)
elseif (UNIX)
    message(STATUS "Building for UNIX")

    target_link_libraries(${PROJECT_NAME} glfw Vulkan::Vulkan)
endif()

set(SHADERS_DIR "${CMAKE_SOURCE_DIR}/shaders")
target_compile_definitions(GlorpEngine PRIVATE SHADERS_DIR="${SHADERS_DIR}")

############## Build SHADERS #######################

# Find glslangValidator
find_program(GLSL_VALIDATOR glslangValidator HINTS
    /usr/local/bin
    $ENV{VULKAN_SDK}/Bin
)

# Compile shaders to SPIR-V
file(GLOB_RECURSE GLSL_SOURCE_FILES
    "${PROJECT_SOURCE_DIR}/shaders/*.frag"
    "${PROJECT_SOURCE_DIR}/shaders/*.vert"
)

foreach(GLSL ${GLSL_SOURCE_FILES})
    get_filename_component(FILE_NAME ${GLSL} NAME)
    set(SPIRV "${PROJECT_SOURCE_DIR}/shaders/${FILE_NAME}.spv")
    add_custom_command(
        OUTPUT ${SPIRV}
        COMMAND ${GLSL_VALIDATOR} -V ${GLSL} -o ${SPIRV}
        DEPENDS ${GLSL})
    list(APPEND SPIRV_BINARY_FILES ${SPIRV})
endforeach(GLSL)

add_custom_target(
    Shaders
    DEPENDS ${SPIRV_BINARY_FILES}
)
